(()=>{"use strict";var n={607:(n,e,t)=>{t.d(e,{A:()=>s});var r=t(354),o=t.n(r),a=t(314),i=t.n(a)()(o());i.push([n.id,'body {\n  font-family: Arial, sans-serif;\n  margin: 0;\n  padding: 0;\n  background-color: #f4f4f4;\n}\n\n.navbar {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #f44336;\n  color: #fff;\n}\n\n.note-item {\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  padding: 10px;\n  background-color: #fff;\n  margin-bottom: 10px;\n}\n\n.delete-button {\n  margin-top: 10px;\n  padding: 5px 10px;\n  background-color: #f44336;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n}\n\n.delete-button:hover {\n  background-color: #d32f2f;\n}\n\nform {\n  background-color: #fff;\n  padding: 20px;\n  border-radius: 5px;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n}\n\ninput[type="text"],\ntextarea {\n  width: 100%;\n  padding: 10px;\n  margin-bottom: 10px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  box-sizing: border-box;\n}\n\nbutton[type="submit"] {\n  padding: 10px 20px;\n  background-color: #f44336;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n}\n\nbutton[type="submit"]:hover {\n  background-color: #d32f2f;\n}\n',"",{version:3,sources:["webpack://./src/style/styles.css"],names:[],mappings:"AAAA;EACE,8BAA8B;EAC9B,SAAS;EACT,UAAU;EACV,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,yBAAyB;EACzB,WAAW;AACb;;AAEA;EACE,sBAAsB;EACtB,kBAAkB;EAClB,aAAa;EACb,sBAAsB;EACtB,mBAAmB;AACrB;;AAEA;EACE,gBAAgB;EAChB,iBAAiB;EACjB,yBAAyB;EACzB,YAAY;EACZ,YAAY;EACZ,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,sBAAsB;EACtB,aAAa;EACb,kBAAkB;EAClB,wCAAwC;AAC1C;;AAEA;;EAEE,WAAW;EACX,aAAa;EACb,mBAAmB;EACnB,sBAAsB;EACtB,kBAAkB;EAClB,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;EAClB,yBAAyB;EACzB,YAAY;EACZ,YAAY;EACZ,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,yBAAyB;AAC3B",sourcesContent:['body {\r\n  font-family: Arial, sans-serif;\r\n  margin: 0;\r\n  padding: 0;\r\n  background-color: #f4f4f4;\r\n}\r\n\r\n.navbar {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: #f44336;\r\n  color: #fff;\r\n}\r\n\r\n.note-item {\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n  padding: 10px;\r\n  background-color: #fff;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.delete-button {\r\n  margin-top: 10px;\r\n  padding: 5px 10px;\r\n  background-color: #f44336;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 3px;\r\n  cursor: pointer;\r\n}\r\n\r\n.delete-button:hover {\r\n  background-color: #d32f2f;\r\n}\r\n\r\nform {\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\ninput[type="text"],\r\ntextarea {\r\n  width: 100%;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 3px;\r\n  box-sizing: border-box;\r\n}\r\n\r\nbutton[type="submit"] {\r\n  padding: 10px 20px;\r\n  background-color: #f44336;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 3px;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton[type="submit"]:hover {\r\n  background-color: #d32f2f;\r\n}\r\n'],sourceRoot:""}]);const s=i},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<n.length;d++){var l=[].concat(n[d]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},354:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},72:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],s=0;s<n.length;s++){var c=n[s],d=r.base?c[0]+r.base:c[0],l=a[d]||0,u="".concat(d," ").concat(l);a[d]=l+1;var p=t(u),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(A);else{var f=o(A,r);r.byIndex=s,e.splice(s,0,{identifier:u,updater:f,references:1})}i.push(u)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var c=r(n,o),d=0;d<a.length;d++){var l=t(a[d]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=c}}},659:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{const n="https://notes-api.dicoding.dev/v2";var e=t(72),r=t.n(e),o=t(825),a=t.n(o),i=t(659),s=t.n(i),c=t(56),d=t.n(c),l=t(540),u=t.n(l),p=t(113),A=t.n(p),f=t(607),b={};b.styleTagTransform=A(),b.setAttributes=d(),b.insert=s().bind(null,"head"),b.domAPI=a(),b.insertStyleElement=u(),r()(f.A,b),f.A&&f.A.locals&&f.A.locals;const y=document.getElementById("loading-indicator");class m extends HTMLElement{connectedCallback(){this.innerHTML='\n      <div class="navbar">\n        <h1>Notes App</h1>\n      </div>\n    '}}class h extends HTMLElement{connectedCallback(){this.innerHTML='\n      <form id="note-form">\n        <input type="text" id="title" placeholder="Title" required />\n        <textarea id="body" placeholder="Your note..." required></textarea>\n        <button type="submit">Add Note</button>\n      </form>\n    ',this.querySelector("#note-form").addEventListener("submit",this._handleSubmit.bind(this))}_handleSubmit(e){e.preventDefault();const t=this.querySelector("#title").value,r=this.querySelector("#body").value;t&&r&&(y.style.display="block",async function(e,t){const r=await fetch(`${n}/notes`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({title:e,body:t})}),o=await r.json();if("success"!==o.status)throw new Error(o.message)}(t,r).then((()=>{this.querySelector("#title").value="",this.querySelector("#body").value="",document.dispatchEvent(new Event("noteCreated"))})).catch((n=>console.error("Error creating note:",n))).finally((()=>{y.style.display="none"})))}}class E extends HTMLElement{connectedCallback(){this.innerHTML='<div id="app"></div>',this._loadNotes(),document.addEventListener("noteCreated",this._loadNotes.bind(this))}async _loadNotes(){y.style.display="block";const e=await async function(){const e=document.getElementById("loading-indicator");try{e.style.display="block";const t=await fetch(`${n}/notes`);return(await t.json()).data}catch(n){console.error("Error fetching notes:",n)}finally{e.style.display="none"}}(),t=this.querySelector("#app");t.innerHTML="",e.forEach((n=>{const e=document.createElement("div");e.classList.add("note-item"),e.innerHTML=`\n        <h3 class="note-title">${n.title}</h3>\n        <p class="note-body">${n.body}</p>\n        <button class="delete-button" data-id="${n.id}">Delete</button>\n      `,e.querySelector(".delete-button").addEventListener("click",this._handleDelete.bind(this)),t.appendChild(e)})),y.style.display="none"}_handleDelete(e){const t=e.target.dataset.id;y.style.display="block",async function(e){const t=await fetch(`${n}/notes/${e}`,{method:"DELETE"}),r=await t.json();if("success"!==r.status)throw new Error(r.message)}(t).then((()=>{document.dispatchEvent(new Event("noteCreated"))})).catch((n=>console.error("Error deleting note:",n))).finally((()=>{y.style.display="none"}))}}customElements.define("app-bar",m),customElements.define("note-input",h),customElements.define("note-list",E)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,